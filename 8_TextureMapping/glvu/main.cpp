#define _CRT_SECURE_NO_WARNINGS
#define _SCL_SECURE_NO_WARNINGS

#define FREEGLUT_STATIC
#include "gl_core_3_3.h"
#include <GL/glut.h>
#include <GL/freeglut_ext.h>

#define TW_STATIC
#include <AntTweakBar.h>

#include <iostream>
#include <ctime>
#include <memory>
#include <vector>
#include <string>
#include <cstdlib>

#include "objloader.h"
#include "glprogram.h"
#include "MyImage.h"
#include "VAOImage.h"
#include "VAOMesh.h"
#include "trackball.h"

#include "laplacian.h"


GLProgram MyMesh::prog, MyMesh::pickProg, MyMesh::pointSetProg;
GLTexture MyMesh::colormapTex;

MyMesh M;
int viewport[4] = { 0, 0, 1280, 960 };
int actPrimType = MyMesh::PE_VERTEX;

bool showATB = true;

using MatX3f = Eigen::Matrix<float, Eigen::Dynamic, 3, Eigen::RowMajor>;
using MatX3i = Eigen::Matrix<int, Eigen::Dynamic, 3, Eigen::RowMajor>;
MatX3f meshX;
MatX3i meshF;

Eigen::Matrix<float, 3, 3, Eigen::RowMajor>R; //四元数转换成旋转矩阵
float myRotation[4] = { 1, 0, 0, 0 }; //BONUS: interactively specify the rotation for the Laplacian coordinates at the handles
void rotation() {//得到旋转矩阵
    float w = myRotation[0], x = myRotation[1], y = myRotation[2], z = myRotation[3];
    //ppt12
    R(0, 0) = 1 - 2 * y * y - 2 * z * z; R(0, 1) = 2 * x * y - 2 * w * z; R(0, 2) = 2 * x * z + 2 * w * y;
    R(1, 0) = 2 * x * y + 2 * w * z; R(1, 1) = 1 - 2 * x * x - 2 * z * z; R(1, 2) = 2 * y * z - 2 * w * x;
    R(2, 0) = 2 * x * z - 2 * w * y; R(2, 1) = 2 * y * z - 2 * w * x; R(2, 2) = 1 - 2 * y * y - 2 * x * x;

}

Eigen::SparseMatrix<float> L;//L即laplace矩阵
void deform_preprocess()
{
    L = Laplacian_cotweight(meshX, meshF);
}


void meshDeform()
{
    using namespace Eigen;
    // Ids是改的点标号，Dsts是改动后的位置
    std::vector<int> P2PVtxIds = M.getConstrainVertexIds();
    std::vector<float> p2pDsts = M.getConstrainVertexCoords();//注意使用vector存储的，坑比
    
    deform_preprocess();//得到laplace矩阵
    MatX3f b = L * meshX;
    b = (R * b.transpose()).transpose();

    //给指定点加权，实现（L+lambda*I）y=Lx+lambda*z，这个权重需要取的比较大
    for (int i = 0; i < P2PVtxIds.size(); i++) {
        float l = 100000;//10，100，1000，100000都试过，10000效果最好
        L.coeffRef(P2PVtxIds[i], P2PVtxIds[i]) += l;//coeffRef为Eigen自带的函数，返回引用，直接对位置元素修改
        b(P2PVtxIds[i], 0) += p2pDsts[3 * i + 0] * l;
        b(P2PVtxIds[i], 1) += p2pDsts[3 * i + 1] * l;
        b(P2PVtxIds[i], 2) += p2pDsts[3 * i + 2] * l;
    }

    //这里使用的是Eigen的稀疏求解器，省去了验证分解是否成功的步骤
    SimplicialLDLT<SparseMatrix<float, ColMajor>> solver;
    solver.compute(L);
    Matrix<float, Dynamic, Dynamic, RowMajor> y;   
    y = solver.solve(b);
    
    if (y.cols() > 3)  y = y.leftCols(3);
    if (y.rows() == 0 || y.cols() != 3) return;

    M.upload(y.data(), y.rows(), nullptr, 0, nullptr);
}

int mousePressButton;
int mouseButtonDown;
int mousePos[2];

bool msaa = true;



void display()
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glEnable(GL_DEPTH_TEST);

    if (msaa) glEnable(GL_MULTISAMPLE);
    else glDisable(GL_MULTISAMPLE);

    glViewport(0, 0, viewport[2], viewport[3]);
    M.draw(viewport);

    if (showATB) TwDraw();
    glutSwapBuffers();

    //glFinish();
}

void onKeyboard(unsigned char code, int x, int y)
{
    if (!TwEventKeyboardGLUT(code, x, y)) {
        switch (code) {
        case 17:
            exit(0);
        case 'f':
            glutFullScreenToggle();
            break;
        case ' ':
            showATB = !showATB;
            break;
        }
    }

    glutPostRedisplay();
}

void onMouseButton(int button, int updown, int x, int y)
{
    if (!showATB || !TwEventMouseButtonGLUT(button, updown, x, y)) {
        mousePressButton = button;
        mouseButtonDown = updown;

        if (updown == GLUT_DOWN) {
            if (button == GLUT_LEFT_BUTTON) {
                if (glutGetModifiers()&GLUT_ACTIVE_CTRL) {
                }
                else {
                    int r = M.pick(x, y, viewport, M.PE_VERTEX, M.PO_ADD);
                }
            }
            else if (button == GLUT_RIGHT_BUTTON) {
                M.pick(x, y, viewport, M.PE_VERTEX, M.PO_REMOVE);
            }
        }
        else { // updown == GLUT_UP
            if (button == GLUT_LEFT_BUTTON);
        }

        mousePos[0] = x;
        mousePos[1] = y;
    }

    glutPostRedisplay();
}


void onMouseMove(int x, int y)
{
    if (!showATB || !TwEventMouseMotionGLUT(x, y)) {
        if (mouseButtonDown == GLUT_DOWN) {
            if (mousePressButton == GLUT_MIDDLE_BUTTON) {
                M.moveInScreen(mousePos[0], mousePos[1], x, y, viewport);
            }
            else if (mousePressButton == GLUT_LEFT_BUTTON) {
                if (!M.moveCurrentVertex(x, y, viewport)) {
                    meshDeform();
                }
                else {
                    const float s[2] = { 2.f / viewport[2], 2.f / viewport[3] };
                    auto r = Quat<float>(M.mQRotate)*Quat<float>::trackball(x*s[0] - 1, 1 - y*s[1], s[0]*mousePos[0] - 1, 1 - s[1]*mousePos[1]);
                    std::copy_n(r.q, 4, M.mQRotate);
                }
            }
        }
    }

    mousePos[0] = x; mousePos[1] = y;

    glutPostRedisplay();
}


void onMouseWheel(int wheel_number, int direction, int x, int y)
{
    M.mMeshScale *= direction > 0 ? 1.1f : 0.9f;
    glutPostRedisplay();
}

int initGL(int argc, char **argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | GLUT_MULTISAMPLE);
    glutInitWindowSize(960, 960);
    glutInitWindowPosition(200, 50);
    glutCreateWindow(argv[0]);

    // !Load the OpenGL functions. after the opengl context has been created
    if (ogl_LoadFunctions() == ogl_LOAD_FAILED)
        return -1;

    glClearColor(1.f, 1.f, 1.f, 0.f);

    glutReshapeFunc([](int w, int h) { viewport[2] = w; viewport[3] = h; TwWindowSize(w, h); });
    glutDisplayFunc(display);
    glutKeyboardFunc(onKeyboard);
    glutMouseFunc(onMouseButton);
    glutMotionFunc(onMouseMove);
    glutMouseWheelFunc(onMouseWheel);
    glutCloseFunc([]() {exit(0); });
    return 0;
}

//AntTweakBar库
void TW_CALL bonus(void*)
{
    rotation();
    meshDeform();
}
void createTweakbar()
{
    TwBar *bar = TwGetBarByName("MeshViewer");
    if (bar)    TwDeleteBar(bar);

    //Create a tweak bar
    bar = TwNewBar("MeshViewer");
    TwDefine(" MeshViewer size='220 100' color='0 128 255' text=dark alpha=128 position='5 5'"); // change default tweak bar size and color

    TwAddVarRO(bar, "#Vertex", TW_TYPE_INT32, &M.nVertex, " group='Mesh View'");
    TwAddVarRO(bar, "#Face", TW_TYPE_INT32, &M.nFace, " group='Mesh View'");

    TwAddVarRW(bar, "Point Size", TW_TYPE_FLOAT, &M.pointSize, " group='Mesh View' ");
    TwAddVarRW(bar, "Vertex Color", TW_TYPE_COLOR4F, M.vertexColor.data(), " group='Mesh View' help='mesh vertex color' ");


    TwAddVarRW(bar, "Edge Width", TW_TYPE_FLOAT, &M.edgeWidth, " group='Mesh View' ");
    TwAddVarRW(bar, "Edge Color", TW_TYPE_COLOR4F, M.edgeColor.data(), " group='Mesh View' help='mesh edge color' ");

    TwAddVarRW(bar, "Face Color", TW_TYPE_COLOR4F, M.faceColor.data(), " group='Mesh View' help='mesh face color' ");

    TwDefine(" MeshViewer/'Mesh View' opened=false ");

    TwAddVarRW(bar, "Rotation", TW_TYPE_QUAT4F, myRotation, " group='Modeling' open help='can be used to specify the rotation for current handle' ");
    TwAddButton(bar, "Bonus bar", bonus, NULL, "");//bonus
    
}

int main(int argc, char *argv[])
{
    if (initGL(argc, argv)) {
        fprintf(stderr, "!Failed to initialize OpenGL!Exit...");
        exit(-1);
    }

    MyMesh::buildShaders();


    std::vector<float> uv = {
        0.978148, 0.207912,
0.951057, 0.309017,
0.913545, 0.406737,
0.866025, 0.500000,
0.809017, 0.587785,
0.743145, 0.669131,
0.669131, 0.743145,
0.587785, 0.809017,
0.500000, 0.866025,
0.406737, 0.913545,
0.309017, 0.951057,
0.207912, 0.978148,
0.104528, 0.994522,
0.000000, 1.000000,
-0.104528, 0.994522,
-0.207912, 0.978148,
-0.309017, 0.951057,
-0.406737, 0.913545,
-0.500000, 0.866025,
0.994522, 0.104528,
-0.587785, 0.809017,
0.987899, 0.103763,
0.974680, 0.102167,
0.931696, 0.096596,
0.866878, 0.087939,
0.797783, 0.078644,
0.728998, 0.069368,
0.655150, 0.060080,
0.577538, 0.050729,
0.495320, 0.041898,
0.409583, 0.032871,
0.331678, 0.023915,
0.256592, 0.014925,
0.189114, 0.007785,
0.121749, 0.000947,
0.066450, -0.004065,
0.035640, -0.006675,
0.019956, -0.007973,
0.010186, -0.008760,
-0.583530, 0.803472,
-0.574694, 0.792248,
-0.544077, 0.754881,
-0.496447, 0.698520,
-0.444716, 0.640178,
-0.392893, 0.582689,
-0.346079, 0.520794,
-0.298684, 0.456180,
-0.253209, 0.388881,
-0.207937, 0.319147,
-0.166746, 0.255330,
-0.126745, 0.193540,
-0.088612, 0.137829,
-0.050833, 0.082422,
-0.020409, 0.037268,
-0.003623, 0.012075,
0.004896, -0.000758,
0.212789, 0.388941,
0.781728, 0.421026,
0.698292, 0.362711,
0.613395, 0.328913,
0.527918, 0.319730,
0.444907, 0.328096,
0.365338, 0.345392,
0.288424, 0.366277,
0.855341, 0.155805,
0.819025, 0.310986,
0.722309, 0.240952,
0.618802, 0.217934,
0.518191, 0.234952,
0.431075, 0.269685,
0.354263, 0.307562,
0.282262, 0.347504,
0.268818, 0.329781,
0.327949, 0.271243,
0.393030, 0.211874,
0.471735, 0.146403,
0.589669, 0.092041,
0.736275, 0.511616,
0.663348, 0.456208,
0.589946, 0.418180,
0.515592, 0.395454,
0.440381, 0.385132,
0.364694, 0.383152,
0.288796, 0.385170,
0.682201, 0.590392,
0.619022, 0.533030,
0.554826, 0.490685,
0.489731, 0.459027,
0.422799, 0.435406,
0.354483, 0.417302,
0.284357, 0.402384,
0.620190, 0.659806,
0.566875, 0.598216,
0.510608, 0.551062,
0.454233, 0.511897,
0.396713, 0.477978,
0.337638, 0.446967,
0.276253, 0.417586,
0.550908, 0.720558,
0.507926, 0.653824,
0.461306, 0.601184,
0.413388, 0.555765,
0.365505, 0.513188,
0.316567, 0.471730,
0.265569, 0.430419,
0.474808, 0.772722,
0.442380, 0.700737,
0.405896, 0.642442,
0.367671, 0.591071,
0.330188, 0.541464,
0.292645, 0.491576,
0.253414, 0.440745,
0.391354, 0.816459,
0.370927, 0.738970,
0.343816, 0.675906,
0.316440, 0.619047,
0.290888, 0.563344,
0.265830, 0.506716,
0.239795, 0.448552,
0.302984, 0.850324,
0.294742, 0.767810,
0.278463, 0.700188,
0.262495, 0.638732,
0.249476, 0.578192,
0.237299, 0.516752,
0.225153, 0.453615,
0.214049, 0.872640,
0.213715, 0.786740,
0.211013, 0.714180,
0.207947, 0.648760,
0.206667, 0.585416,
0.207698, 0.521350,
0.209924, 0.455781,
0.126452, 0.881977,
0.135343, 0.792459,
0.143268, 0.716630,
0.151668, 0.648728,
0.162493, 0.584447,
0.177118, 0.520152,
0.194181, 0.455003,
0.036504, 0.879285,
0.058464, 0.783871,
0.074579, 0.705988,
0.093286, 0.637830,
0.117447, 0.574263,
0.146331, 0.512277,
0.178474, 0.450646,
-0.059548, 0.864035,
-0.025028, 0.761968,
0.002934, 0.681551,
0.034439, 0.613902,
0.073021, 0.553088,
0.116016, 0.496605,
0.163217, 0.442259,
-0.163896, 0.834402,
-0.117326, 0.723616,
-0.071196, 0.639453,
-0.023666, 0.573612,
0.029036, 0.518806,
0.086493, 0.471836,
0.148577, 0.429285,
-0.285339, 0.789057,
-0.229321, 0.665425,
-0.154965, 0.576411,
-0.083965, 0.513541,
-0.013405, 0.469982,
0.060790, 0.438145,
0.136611, 0.412113,
-0.435456, 0.730003,
-0.261505, 0.486376,
-0.140573, 0.429318,
-0.043445, 0.407412,
0.044842, 0.395980,
0.129776, 0.391280,
-0.160449, 0.312828,
-0.049037, 0.330747,
0.044558, 0.347410,
0.130435, 0.367704,
-0.024672, 0.253720,
0.061472, 0.299906,
0.138804, 0.344793,
-0.041211, 0.117931,
0.029632, 0.194272,
0.094281, 0.261189,
0.154377, 0.325725,
0.022282, 0.014825,
0.051541, 0.071463,
0.096484, 0.152679,
0.137412, 0.233653,
0.175588, 0.312207,
0.144796, 0.029767,
0.170258, 0.126741,
0.186552, 0.218368,
0.199970, 0.305054,
0.248979, 0.125692,
0.238112, 0.219800,
0.225177, 0.305767,
0.376692, 0.063456,
0.329073, 0.158811,
0.287514, 0.239619,
0.248980, 0.314940,
0.005700, -0.017547,
-0.001484, -0.031664,
-0.015569, -0.059424,
-0.040740, -0.109381,
-0.071264, -0.170250,
-0.101793, -0.231200,
-0.135723, -0.298945,
-0.170876, -0.369189,
-0.208952, -0.446200,
-0.244494, -0.519960,
-0.277085, -0.590248,
-0.307726, -0.657380,
-0.332927, -0.723143,
-0.358375, -0.789565,
-0.382611, -0.852865,
-0.398947, -0.894703,
-0.404109, -0.907308,
-0.406737, -0.913545,
-0.309017, -0.951057,
-0.207912, -0.978148,
-0.104528, -0.994522,
-0.000000, -1.000000,
0.104528, -0.994522,
0.207912, -0.978148,
0.309017, -0.951057,
0.406737, -0.913545,
0.500000, -0.866025,
0.587785, -0.809017,
0.669131, -0.743145,
0.743145, -0.669131,
0.809017, -0.587785,
0.866025, -0.500000,
0.913545, -0.406737,
0.951057, -0.309017,
0.978148, -0.207912,
0.994522, -0.104528,
1.000000, -0.000000,
0.243795, -0.373037,
-0.023508, -0.880277,
-0.031974, -0.779373,
-0.018623, -0.689632,
0.017115, -0.611697,
0.067608, -0.544243,
0.124556, -0.483816,
0.183649, -0.427472,
-0.293656, -0.814259,
-0.139981, -0.859127,
-0.151842, -0.739726,
-0.119091, -0.638588,
-0.051805, -0.560773,
0.023917, -0.502613,
0.097244, -0.454704,
0.170662, -0.412673,
0.162735, -0.392676,
0.079938, -0.414905,
-0.005965, -0.441825,
-0.104433, -0.477369,
-0.214494, -0.550697,
0.080530, -0.887188,
0.069938, -0.794060,
0.072172, -0.713417,
0.089310, -0.639417,
0.119192, -0.569571,
0.157561, -0.502628,
0.199730, -0.437413,
0.173975, -0.882348,
0.158370, -0.796339,
0.152800, -0.720576,
0.156908, -0.650134,
0.170756, -0.580987,
0.191795, -0.511904,
0.216734, -0.442621,
0.262240, -0.866115,
0.236589, -0.788198,
0.223573, -0.716470,
0.218289, -0.648598,
0.219148, -0.581546,
0.224884, -0.513335,
0.233500, -0.443752,
0.348132, -0.837756,
0.311927, -0.767136,
0.289448, -0.700782,
0.274437, -0.636913,
0.263796, -0.573322,
0.255888, -0.508276,
0.249423, -0.441422,
0.430280, -0.798844,
0.383727, -0.735220,
0.351425, -0.674745,
0.326499, -0.616069,
0.305044, -0.557403,
0.284619, -0.497603,
0.264247, -0.436095,
0.507769, -0.750104,
0.451276, -0.693487,
0.409320, -0.639354,
0.374656, -0.586880,
0.342914, -0.534651,
0.310930, -0.481923,
0.277818, -0.428098,
0.579964, -0.691787,
0.513932, -0.642321,
0.462630, -0.595078,
0.418599, -0.549787,
0.377116, -0.505471,
0.334573, -0.461657,
0.289984, -0.417631,
0.647159, -0.623166,
0.571198, -0.581573,
0.510756, -0.541899,
0.457783, -0.504839,
0.407267, -0.469889,
0.355236, -0.436829,
0.300538, -0.404768,
0.707930, -0.544806,
0.622371, -0.510897,
0.553006, -0.479368,
0.491473, -0.451723,
0.432687, -0.427740,
0.372370, -0.407397,
0.309135, -0.389556,
0.758130, -0.460123,
0.666275, -0.430016,
0.588658, -0.406454,
0.518786, -0.389648,
0.452365, -0.378698,
0.385043, -0.373400,
0.315184, -0.372175,
0.800338, -0.366339,
0.703003, -0.337069,
0.617557, -0.320748,
0.539011, -0.316721,
0.464772, -0.322405,
0.391398, -0.335648,
0.317670, -0.353208,
0.832588, -0.261588,
0.727642, -0.230657,
0.634486, -0.222287,
0.546122, -0.235286,
0.464221, -0.262574,
0.388174, -0.296802,
0.315218, -0.333744,
0.852504, -0.140832,
0.738403, -0.102789,
0.628341, -0.111132,
0.526884, -0.152541,
0.443846, -0.203108,
0.372343, -0.258799,
0.306665, -0.315119,
0.867152, 0.018642,
0.590970, 0.011022,
0.474603, -0.066929,
0.400612, -0.148026,
0.342991, -0.225455,
0.291622, -0.299382,
0.377912, -0.004096,
0.333655, -0.109876,
0.300556, -0.203007,
0.270776, -0.289149,
0.254037, -0.099071,
0.249857, -0.197038,
0.246405, -0.286459,
0.147096, -0.023811,
0.175814, -0.120208,
0.199092, -0.208241,
0.221684, -0.291620,
0.024354, -0.030297,
0.058353, -0.082231,
0.107210, -0.158663,
0.153807, -0.232363,
0.199118, -0.303571,
-0.027419, -0.143201,
0.047546, -0.209959,
0.115683, -0.267642,
0.180321, -0.321390,
0.000762, -0.277450,
0.087771, -0.313504,
0.167090, -0.343981,
-0.125608, -0.356302,
-0.016087, -0.361835,
0.075931, -0.365786,
0.161184, -0.368926,
-0.669131, 0.743145,
-0.743145, 0.669131,
-0.809017, 0.587785,
-0.866025, 0.500000,
-0.913545, 0.406737,
-0.951057, 0.309017,
-0.978148, 0.207912,
-0.994522, 0.104528,
-1.000000, 0.000000,
-0.994522, -0.104528,
-0.978148, -0.207912,
-0.951057, -0.309017,
-0.913545, -0.406737,
-0.866025, -0.500000,
-0.809017, -0.587785,
-0.743145, -0.669131,
-0.669131, -0.743145,
-0.587785, -0.809017,
-0.500000, -0.866025,
-0.433053, -0.044833,
-0.750109, 0.455308,
-0.652758, 0.404477,
-0.577558, 0.341773,
-0.526159, 0.266022,
-0.492381, 0.188123,
-0.468765, 0.110228,
-0.449801, 0.032616,
-0.550233, 0.655287,
-0.671119, 0.544759,
-0.553694, 0.489009,
-0.477599, 0.405072,
-0.443452, 0.304947,
-0.432814, 0.209131,
-0.429495, 0.121601,
-0.430079, 0.037573,
-0.407927, 0.035403,
-0.384569, 0.118276,
-0.362720, 0.207266,
-0.340308, 0.312093,
-0.344983, 0.445694,
-0.806955, 0.366946,
-0.718022, 0.322642,
-0.646046, 0.273371,
-0.588306, 0.215133,
-0.541486, 0.152757,
-0.502231, 0.088677,
-0.466797, 0.022604,
-0.849003, 0.276492,
-0.764668, 0.243731,
-0.693497, 0.204427,
-0.632264, 0.160540,
-0.577820, 0.112259,
-0.527985, 0.062252,
-0.480159, 0.009730,
-0.878839, 0.184515,
-0.796068, 0.161565,
-0.725469, 0.136136,
-0.662102, 0.104538,
-0.602911, 0.069813,
-0.546038, 0.033902,
-0.489673, -0.004447,
-0.896794, 0.094500,
-0.815444, 0.082134,
-0.744936, 0.066598,
-0.680371, 0.047611,
-0.618524, 0.026149,
-0.557456, 0.003991,
-0.495735, -0.019722,
-0.904075, 0.007366,
-0.823646, 0.006279,
-0.753241, -0.001501,
-0.688525, -0.009626,
-0.625869, -0.017871,
-0.562897, -0.026423,
-0.498632, -0.035370,
-0.900077, -0.086010,
-0.820952, -0.073770,
-0.751373, -0.071056,
-0.687409, -0.067372,
-0.625398, -0.062356,
-0.562833, -0.057056,
-0.498715, -0.051067,
-0.885565, -0.177239,
-0.807265, -0.157171,
-0.739278, -0.142025,
-0.677229, -0.125284,
-0.617372, -0.106938,
-0.557151, -0.087312,
-0.495721, -0.066545,
-0.860460, -0.264215,
-0.783558, -0.235515,
-0.717608, -0.209300,
-0.658127, -0.181807,
-0.601892, -0.150378,
-0.546213, -0.116837,
-0.490021, -0.081653,
-0.824311, -0.349992,
-0.748540, -0.311002,
-0.684832, -0.275019,
-0.629464, -0.235194,
-0.578520, -0.191441,
-0.529613, -0.144962,
-0.481348, -0.095875,
-0.775598, -0.438052,
-0.701001, -0.386631,
-0.640653, -0.336116,
-0.590354, -0.283819,
-0.546661, -0.228618,
-0.507078, -0.169890,
-0.469585, -0.108286,
-0.714912, -0.518085,
-0.640345, -0.450133,
-0.583161, -0.388120,
-0.539051, -0.326222,
-0.505110, -0.259978,
-0.478030, -0.190020,
-0.454633, -0.117960,
-0.640355, -0.587594,
-0.561886, -0.507261,
-0.508263, -0.434609,
-0.473437, -0.361118,
-0.453146, -0.282681,
-0.442059, -0.203358,
-0.436286, -0.124061,
-0.545466, -0.661740,
-0.456132, -0.575459,
-0.411309, -0.477686,
-0.393535, -0.380082,
-0.391228, -0.291577,
-0.401072, -0.206801,
-0.415917, -0.124995,
-0.418445, -0.752683,
-0.286622, -0.511417,
-0.295745, -0.376033,
-0.324639, -0.279571,
-0.358558, -0.196371,
-0.395041, -0.119123,
-0.187152, -0.323984,
-0.255381, -0.238308,
-0.316340, -0.168351,
-0.374954, -0.105187,
-0.199609, -0.175843,
-0.282451, -0.127767,
-0.358942, -0.085344,
-0.076121, -0.119353,
-0.175462, -0.098969,
-0.264683, -0.079229,
-0.349826, -0.061761,
-0.016071, -0.010814,
-0.079203, -0.015608,
-0.171219, -0.020429,
-0.261391, -0.028108,
-0.348214, -0.036489,
-0.086749, 0.086102,
-0.183956, 0.054307,
-0.271572, 0.021829,
-0.353618, -0.011768,
-0.220723, 0.124672,
-0.297214, 0.066324,
-0.366197, 0.009839,
-0.222165, 0.273401,
-0.285758, 0.179314,
-0.337561, 0.099595,
-0.385449, 0.025908,
    };
    const float* uvData = reinterpret_cast<const float*>(uv.data());

    std::vector<float> x;
    std::vector<int> f;

    const char* meshpath = argc > 1 ? argv[1] : "balls.obj";
    readObj(meshpath, x, f);

    meshX = Eigen::Map<MatX3f>(x.data(), x.size() / 3, 3);
    meshF = Eigen::Map<MatX3i>(f.data(), f.size() / 3, 3);

    M.upload(x.data(), x.size() / 3, f.data(), f.size() / 3, uvData);
    M.tex.setImage(std::string("bricks2.png"));
    
    M.showTexture = true;


    //////////////////////////////////////////////////////////////////////////
    TwInit(TW_OPENGL_CORE, NULL);
    //Send 'glutGetModifers' function pointer to AntTweakBar;
    //required because the GLUT key event functions do not report key modifiers states.
    TwGLUTModifiersFunc(glutGetModifiers);
    glutSpecialFunc([](int key, int x, int y) { TwEventSpecialGLUT(key, x, y); glutPostRedisplay(); }); // important for special keys like UP/DOWN/LEFT/RIGHT ...
    TwCopyStdStringToClientFunc([](std::string& dst, const std::string& src) {dst = src; });

    createTweakbar();

    //////////////////////////////////////////////////////////////////////////
    atexit([] { TwDeleteAllBars();  TwTerminate(); }); 

    glutTimerFunc(1, [](int) {
        deform_preprocess();
    }, 
        0);


    //////////////////////////////////////////////////////////////////////////
    glutMainLoop();

    return 0;
}
